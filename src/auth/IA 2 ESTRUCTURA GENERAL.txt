// src/utils/api.ts
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://tu-backend-django.com/api',
});

api.interceptors.request.use((config) => {
  const token = localStorage.getItem('access_token');
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});

api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      try {
        const refreshToken = localStorage.getItem('refresh_token');
        const response = await axios.post('/token/refresh/', { refresh: refreshToken });
        
        localStorage.setItem('access_token', response.data.access);
        api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;
        return api(originalRequest);
      } catch (refreshError) {
        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');
        window.location.href = '/login';
      }
    }
    
    return Promise.reject(error);
  }
);

export default api;

// src/components/auth/ProtectedRoute.tsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const ProtectedRoute: React.FC = () => {
  const { isAuthenticated } = useAuth();
  
  // Si no est치 autenticado, redirige al login
  if (!isAuthenticated) {
    return <Navigate to="/" replace />;
  }
  
  // Si est치 autenticado, muestra las rutas hijas
  return <Outlet />;
};

export default ProtectedRoute;

// components/employees

// src/components/employees/EmployeeForm.tsx
import React, { useState, useEffect } from 'react';
import api from '../../utils/api';

interface JobPosition {
  id: number;
  name: string;
}

const EmployeeForm: React.FC = () => {
  const [username, setUsername] = useState<string>('');
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [first_name, setFirstName] = useState<string>('');
  const [last_name, setLastName] = useState<string>('');
  const [position, setPosition] = useState<number | null>(null);
  const [jobPositions, setJobPositions] = useState<JobPosition[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  // Cargar los puestos de trabajo al montar el componente
  useEffect(() => {
    const fetchJobPositions = async () => {
      try {
        const response = await api.get('/jobpositions/');
        setJobPositions(response.data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching job positions:', error);
        setLoading(false);
      }
    };
    fetchJobPositions();
  }, []);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!position) {
      alert('Por favor, selecciona un puesto.');
      return;
    }
    try {
      await api.post('/employees/', {
        user: { username, email, password, first_name, last_name },
        position,
      });
      alert('Empleado registrado exitosamente');
    } catch (error) {
      console.error('Error registering employee:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <h2 className="text-xl font-bold">Registrar Nuevo Empleado</h2>
      <input
        type="text"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        placeholder="Nombre de usuario"
        className="w-full px-3 py-2 border border-gray-300 rounded-md"
        required
      />
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
        className="w-full px-3 py-2 border border-gray-300 rounded-md"
        required
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Contrase침a"
        className="w-full px-3 py-2 border border-gray-300 rounded-md"
        required
      />
      <input
        type="text"
        value={first_name}
        onChange={(e) => setFirstName(e.target.value)}
        placeholder="Nombre"
        className="w-full px-3 py-2 border border-gray-300 rounded-md"
        required
      />
      <input
        type="text"
        value={last_name}
        onChange={(e) => setLastName(e.target.value)}
        placeholder="Apellido"
        className="w-full px-3 py-2 border border-gray-300 rounded-md"
        required
      />
      {loading ? (
        <p>Cargando puestos...</p>
      ) : (
        <select
          value={position || ''}
          onChange={(e) => setPosition(Number(e.target.value))}
          className="w-full px-3 py-2 border border-gray-300 rounded-md"
          required
        >
          <option value="">Selecciona un puesto</option>
          {jobPositions.map((job) => (
            <option key={job.id} value={job.id}>
              {job.name}
            </option>
          ))}
        </select>
      )}
      <button
        type="submit"
        className="px-4 py-2 bg-indigo-600 text-white rounded-md"
      >
        Registrar Empleado
      </button>
    </form>
  );
};

export default EmployeeForm;

//components/orders

// src/components/orders/OrderForm.tsx
import React, { useState } from 'react';
import api from '../../utils/api';

interface OrderFormProps {
  customerId: number;
}

const OrderForm: React.FC<OrderFormProps> = ({ customerId }) => {
  const [services, setServices] = useState<{ service: number; quantity: number }[]>([]);
  const [note, setNote] = useState<string>('');

  const handleAddService = () => {
    setServices([...services, { service: 0, quantity: 1 }]);
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      await api.post('/orders/', {
        customer: customerId,
        services: services.map((s) => ({
          service: s.service,
          quantity: s.quantity,
        })),
        note,
      });
      alert('Orden creada exitosamente');
    } catch (error) {
      console.error('Error creating order:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <h2 className="text-xl font-bold">Crear Nueva Orden</h2>
      {services.map((service, index) => (
        <div key={index} className="flex space-x-2">
          <input
            type="number"
            value={service.service}
            onChange={(e) =>
              setServices(
                services.map((s, i) =>
                  i === index ? { ...s, service: parseInt(e.target.value) } : s
                )
              )
            }
            placeholder="ID del servicio"
            className="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
          <input
            type="number"
            value={service.quantity}
            onChange={(e) =>
              setServices(
                services.map((s, i) =>
                  i === index ? { ...s, quantity: parseInt(e.target.value) } : s
                )
              )
            }
            placeholder="Cantidad"
            className="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>
      ))}
      <button
        type="button"
        onClick={handleAddService}
        className="px-4 py-2 bg-green-500 text-white rounded-md"
      >
        Agregar Servicio
      </button>
      <textarea
        value={note}
        onChange={(e) => setNote(e.target.value)}
        placeholder="Notas adicionales"
        className="w-full px-3 py-2 border border-gray-300 rounded-md"
      />
      <button
        type="submit"
        className="px-4 py-2 bg-indigo-600 text-white rounded-md"
      >
        Crear Orden
      </button>
    </form>
  );
};

export default OrderForm;

//components/services

// src/components/services/ServiceForm.tsx
import React, { useState } from 'react';
import api from '../../utils/api';

const ServiceForm: React.FC = () => {
  const [name, setName] = useState<string>('');
  const [description, setDescription] = useState<string>('');
  const [price, setPrice] = useState<number>(0);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      await api.post('/services/', { name, description, price });
      alert('Servicio creado exitosamente');
    } catch (error) {
      console.error('Error creating service:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <h2 className="text-xl font-bold">Agregar Nuevo Servicio</h2>
      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="Nombre del servicio"
        className="w-full px-3 py-2 border border-gray-300 rounded-md"
      />
      <textarea
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        placeholder="Descripci칩n"
        className="w-full px-3 py-2 border border-gray-300 rounded-md"
      />
      <input
        type="number"
        value={price}
        onChange={(e) => setPrice(parseFloat(e.target.value))}
        placeholder="Precio"
        className="w-full px-3 py-2 border border-gray-300 rounded-md"
      />
      <button
        type="submit"
        className="px-4 py-2 bg-indigo-600 text-white rounded-md"
      >
        Crear Servicio
      </button>
    </form>
  );
};

export default ServiceForm;

//components
// src/components/App.tsx
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { AuthProvider } from '../context/AuthContext';
import Login from '../auth/Login';
import Dashboard from '../dashboard/Dashboard';
import ProtectedRoute from '../auth/ProtectedRoute';
import UserPanel from './UserPanel';

const App = () => {
  return (
    <AuthProvider>
      <BrowserRouter>
        <Routes>
          {/* Ruta p칰blica */}
          <Route path="/" element={<Login />} />
          
          {/* Rutas protegidas */}
          <Route element={<ProtectedRoute />}>
            <Route path="/dashboard" element={<Dashboard />} />
          </Route>
          
          {/* Ruta p칰blica con par치metro */}
          <Route path="/u/:username" element={<UserPanel />} />
        </Routes>
      </BrowserRouter>
    </AuthProvider>
  );
};

export default App;

// src/components/UserPanel.tsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import api from '../utils/api';

const UserPanel: React.FC = () => {
  const { username } = useParams<{ username: string }>();
  const [user, setUser] = useState<any>(null);
  const [orders, setOrders] = useState<any[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const userResponse = await api.get(`/customers/${username}/`);
        setUser(userResponse.data);

        const ordersResponse = await api.get(`/customers/${username}/orders/`);
        setOrders(ordersResponse.data);
      } catch (error) {
        console.error('Error fetching user data:', error);
      }
    };

    fetchData();
  }, [username]);

  if (!user) return <p>Cargando...</p>;

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-6">Bienvenido, {user.first_name} {user.last_name}</h1>
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <p className="text-gray-700 dark:text-gray-300">
          <strong>Tel칠fono:</strong> {user.phone}
        </p>
        <p className="text-gray-700 dark:text-gray-300">
          <strong>Direcci칩n:</strong> {user.address}
        </p>
      </div>
      <h2 className="text-2xl font-bold mt-8 mb-4">Historial de Pedidos</h2>
      <table className="min-w-full bg-white dark:bg-gray-800 border border-gray-300">
        <thead>
          <tr>
            <th className="py-2 px-4 border-b">ID</th>
            <th className="py-2 px-4 border-b">Estado</th>
            <th className="py-2 px-4 border-b">Total</th>
          </tr>
        </thead>
        <tbody>
          {orders.map((order) => (
            <tr key={order.id}>
              <td className="py-2 px-4 border-b">{order.id}</td>
              <td className="py-2 px-4 border-b">{order.status}</td>
              <td className="py-2 px-4 border-b">${order.total_amount.toFixed(2)}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserPanel;

// Content/

// src/context/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect } from 'react';



interface AuthContextType {
  accessToken: string | null;
  refreshToken: string | null;
  login: (access: string, refresh: string) => void;
  logout: () => void;
}


const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [accessToken, setAccessToken] = useState<string | null>(localStorage.getItem('access_token'));
  const [refreshToken, setRefreshToken] = useState<string | null>(localStorage.getItem('refresh_token'));

  const login = (access: string, refresh: string) => {
    localStorage.setItem('access_token', access);
    localStorage.setItem('refresh_token', refresh);
    setAccessToken(access);
    setRefreshToken(refresh);
  };

  const logout = () => {
    localStorage.removeItem('access_token');
    localStorage.removeItem('refresh_token');
    setAccessToken(null);
    setRefreshToken(null);
  };

  return (
    <AuthContext.Provider value={{ accessToken, refreshToken, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error('useAuth debe usarse dentro de AuthProvider');
  return context;
};


const { accessToken } = useAuth();
const isAuthenticated = !!accessToken; // <- As칤 se calcular칤a

//dashboard//

// src/components/dashboard/Dashboard.tsx
import React from 'react';
import OrderForm from '../components/orders/OrderForm';
import ServiceForm from '../components/services/ServiceForm';
import EmployeeForm from '../components/employees/EmployeeForm';

const Dashboard: React.FC = () => {
  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-6">Dashboard</h1>
      <section className="mb-8">
        <h2 className="text-2xl font-bold mb-4">Crear Nueva Orden</h2>
        <OrderForm customerId={1} />
      </section>
      <section className="mb-8">
        <h2 className="text-2xl font-bold mb-4">Agregar Nuevo Servicio</h2>
        <ServiceForm />
      </section>
      <section>
        <h2 className="text-2xl font-bold mb-4">Registrar Nuevo Empleado</h2>
        <EmployeeForm />
      </section>
    </div>
  );
};

export default Dashboard;

//layouts/

---
// src/layouts/Layout.astro
import "../styles/global.css";
---
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="../styles/global.css" />
    <title>Dloub</title>
  </head>
  <body class="bg-gray-100">
    <slot />
  </body>
</html>

//pages/

---
// src/pages/index.astro
import Layout from '../layouts/Layout.astro';
import App from '../components/App';

---

<Layout>
  <App client:only="react" />
</Layout>


// styles/
//global.css
@import "tailwindcss";


//utils/

// src/utils/api.ts
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:8000/api',
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para agregar el token JWT
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('accessToken');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default api;



//astro.config.mjs

// @ts-check
import { defineConfig } from "astro/config";
import tailwindcss from "@tailwindcss/vite";
import react from '@astrojs/react';
// https://astro.build/config
export default defineConfig({
  vite: {
    plugins: [tailwindcss()],
  },
  integrations: [
    react({
      include: ['**/react/*'],
    }),
  ],
});


// tailwind.config.cjs
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      './src/**/*.{astro,html,js,jsx,ts,tsx}', // Incluye todos los archivos relevantes
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  };